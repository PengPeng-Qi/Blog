[{"metadata":{"title":"Front-end Code Engineering","slug":"d9gm9wvsh","tag":["engineering"],"createdTime":"2024-07-29","modifiedTime":"2024-08-09 16:47:04"},"title":"Front-end Code Engineering","slug":"d9gm9wvsh","createdTime":"2024-07-29","modifiedTime":"2024-08-09 16:47:04","isPublish":true,"content":"\n## 基本流程\n\n<Image\n  src={\"/commit-flow.png\"}\n  alt=\"Commit Flow\"\n  quality={50}\n  width={5201}\n  height={3198}\n  sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 70vw, 60vw\"\n/>\n\n项目仓库已经集成插件自动推荐，实现**开发时**进行 ESLint、StyleLint、Prettier 操作。\n\n> [commit 规范指南](https://github.com/conventional-changelog/commitlint/?tab=readme-ov-file#what-is-commitlint)\n\n### 效果演示\n\nSuccess\n\n<Image\n  src={\"/commit-success.gif\"}\n  alt=\"Commit Success\"\n  width={1538}\n  height={1230}\n/>\n\nError\n\n<Image\n  src={\"/commit-error.gif\"}\n  alt=\"Commit Error\"\n  width={1640}\n  height={1750}\n/>\n\n### ESLint\n\n```js\nmodule.exports = {\n  root: true,\n\n  env: {\n    node: true, // 为 ESLint 提供内置的 NodeJS 的全局变量\n  },\n\n  /**\n   * 插件可以提供额外的规则、环境、解析器等\n   *\n   * 解析器：将 Vue 、Ts 等解析为 ESLint 支持的语法\n   */\n  plugins: [\n    \"vue\", // Vue 插件，提供了解析器解析 Vue 的 <template> <script> 等、还有规则集等\n    \"@typescript-eslint\", // TypeScript 插件，提供 TS 的解析器及规则集等\n    \"security\", // 安全插件\n  ],\n\n  // 继承某些已有的规则，需要注意顺序\n  extends: [\n    \"eslint:recommended\", // 配置预设，eslint 官方推荐基础规则集\n    \"plugin:vue/vue3-essential\", // eslint-plugin-vue 插件中 vue3 基本规则集\n    \"@vue/eslint-config-typescript\", // vue 官方提供的 ts 规则集\n    \"@vue/eslint-config-prettier/skip-formatting\", // 跳过 ESLint 的格式化\n    \"plugin:security/recommended-legacy\", // eslint-plugin-security 插件中的安全性基本规则集\n  ],\n\n  /**\n   * 配置规则\n   * \"off\" 或 0    ==>  关闭规则\n   * \"warn\" 或 1   ==>  打开的规则作为警告（不影响代码执行）\n   * \"error\" 或 2  ==>  规则作为一个错误（代码不能执行，界面报错）\n   */\n  rules: {\n    // eslint (@see: https://eslint.org/docs/latest/rules/)\n    eqeqeq: \"error\", // 使用严格相等符号\n    \"no-var\": \"error\", // 要求使用 let 或 const 而不是 var\n\n    // typeScript (@see: https://typescript-eslint.io/rules)\n    \"@typescript-eslint/no-unused-vars\": \"error\", // 禁止定义未使用的变量\n\n    // vue (@see: https://eslint.vuejs.org/rules)\n    \"vue/no-mutating-props\": \"error\", // 不允许改变组件 prop\n    \"vue/attribute-hyphenation\": \"error\", // 对模板中的自定义组件强制执行属性命名样式：my-prop=\"prop\"\n\n    // eslint-plugin-security (@see: https://www.npmjs.com/package/eslint-plugin-security)\n    \"security/detect-object-injection\": \"off\", // 允许使用 obj[xxx] 的形式\n  },\n};\n```\n\n### StyleLint\n\n```js\n// @see: https://stylelint.io\n\nmodule.exports = {\n  root: true,\n\n  // 继承某些已有的规则\n  extends: [\n    \"stylelint-config-standard\", // 使用标准配置\n    \"stylelint-config-standard-scss\", // 使用标准的 SCSS 配置\n    \"stylelint-config-recess-order\", // 使用 Recess 风格的 CSS 属性顺序配置\n  ],\n  overrides: [\n    // 识别 .vue/html 文件中的 <style> 标签内的样式\n    {\n      files: [\"**/*.{vue,html}\"],\n      customSyntax: \"postcss-html\",\n    },\n  ],\n  rules: {\n    \"function-url-quotes\": \"always\", // URL 必须包含引号\n    \"color-hex-length\": \"short\", // 颜色的十六进制表示必须是简写形式\n    \"rule-empty-line-before\": \"never\", // 规则之前不允许有空行\n    \"font-family-no-missing-generic-family-keyword\": null, // 不检查字体家族是否缺少通用字体\n    \"scss/at-import-partial-extension\": null, // 允许在 @import 中省略文件扩展名\n    \"selector-class-pattern\": null, // 不强制选择器类名的格式\n    \"value-no-vendor-prefix\": null, // 允许使用供应商前缀 (为了解决多行省略 -webkit-box)\n    \"no-descending-specificity\": null, // 允许低特异性选择器覆盖高特异性选择器\n    \"value-keyword-case\": null, // 不强制 value 关键字的大小写，解决在 scss 中使用 v-bind 大写单词报错\n    \"selector-pseudo-class-no-unknown\": [\n      true,\n      {\n        ignorePseudoClasses: [\"global\", \"v-deep\", \"deep\"], // 忽略这些未知的伪类选择器\n      },\n    ],\n  },\n\n  ignoreFiles: [\"**/*.{js,jsx,tsx,ts,cjs,json,d.ts}\", \"dist/**\"],\n};\n```\n\n### Prettier\n\n```js\n// @see: https://prettier.io/docs/en/options\n\nmodule.exports = {\n  // 指定最大换行长度\n  printWidth: 120,\n  // 缩进制表符宽度 | 空格数\n  tabWidth: 2,\n  // 使用制表符而不是空格缩进行 (true：制表符，false：空格)\n  useTabs: false,\n  // 结尾使用分号 (true：有，false：没有)\n  semi: true,\n  // 使用单引号 (true：单引号，false：双引号)\n  singleQuote: false,\n\n  /**\n   * 在对象字面量中决定是否将属性名用引号括起来，可选值 \"<as-needed|consistent|preserve>\"\n   *\n   * as-needed  - 仅在需要时给对象属性加引号\n   * consistent - 所有属性要么都加，要么都不加\n   * preserve   - 与输入格式保持一致\n   */\n  quoteProps: \"consistent\",\n  // 在JSX中使用单引号而不是双引号 (true：单引号，false：双引号)\n  jsxSingleQuote: false,\n\n  /**\n   * 多行时尽可能打印尾随逗号，可选值 \"<none|es5|all>\"\n   *\n   * none       - 对象属性最后一个属性不加逗号\n   * es5        - 对象属性最后一个属性加逗号\n   * all        - 所有地方均加逗号，含函数最后一位参数\n   */\n  trailingComma: \"es5\",\n  // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\" (true：有，false：没有)\n  bracketSpacing: true,\n  // 将右标签 > 放在最后一行的末尾，而不是单独放在下一行 (true：放末尾，false：单独一行)\n  bracketSameLine: false,\n  // (x) => {} 箭头函数参数只有一个时是否要有小括号 (avoid：省略括号，always：不省略括号)\n  arrowParens: \"always\",\n\n  // 这两个选项可以指定格式化代码的特定范围，而不是整个文件，在处理大型文件时有用，可指定仅格式化某一个块的代码\n  rangeStart: 0,\n  rangeEnd: Infinity,\n\n  // parser - 指定解析器：https://prettier.io/docs/en/options.html#parser （默认自动判断文件类型）\n\n  // 在需要格式化的文件顶部添加特定的 Pragma 注释 （true：需要在需要格式化的文件写@prettier，false：不需要在每个文件顶部写@prettier 也能格式化）\n  requirePragma: false,\n  // 可以在文件顶部插入一个特殊标记，表明该文件已使用 Prettier 格式化 （false：不需要额外添加， true：需要添加）\n  insertPragma: false,\n\n  /**\n   * 用于控制文本或注释是否应该被换行以及如何进行换行，可选值 \"<never|always|preserve>\"\n   *\n   * never      - 将长文本或注释块保持在一块，即使已经超过行宽\n   * always     - 总是换行，尽可能将长文本拆分成多行\n   * preserve   - 与输入格式保持一致\n   */\n  proseWrap: \"always\",\n\n  /**\n   * 控制在 html 中如何处理空白字符，可选值 \"<css|strict|ignore>\"\n   *\n   * css        - 遵守 CSS 风格，即左右两边各一个空格\n   * strict     - 保留原样，不对空格进行处理\n   * ignore     - 去掉空格，减少空格对代码的影响\n   */\n  htmlWhitespaceSensitivity: \"ignore\",\n\n  // 控制在 Vue 单文件组件中 <script> 和 <style> 标签内的代码缩进方式\n  vueIndentScriptAndStyle: false,\n\n  // 换行符使用 lf 结尾是 可选值 \"<auto|lf|crlf|cr>\"\n  endOfLine: \"lf\",\n\n  /**\n   * 是否对嵌入式语言，例如：HTML 中的 CSS 或 JS 进行格式化，可选值 \"<auto|off>\"\n   *\n   * auto       - 如果可以识别则格式化\n   */\n  embeddedLanguageFormatting: \"auto\",\n\n  // 是否将 HTML 每个属性单独放一行\n  singleAttributePerLine: false,\n};\n```\n\n## VSCode 配置\n\n### extensions\n\n```json\n{\n  \"recommendations\": [\n    \"Vue.volar\",\n    \"dbaeumer.vscode-eslint\",\n    \"esbenp.prettier-vscode\",\n    \"stylelint.vscode-stylelint\",\n    \"streetsidesoftware.code-spell-checker\",\n    \"SonarSource.sonarlint-vscode\"\n  ]\n}\n```\n\n### setting\n\n```json\n{\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.stylelint\": \"explicit\",\n    \"source.sortImports\": \"explicit\"\n  },\n  \"stylelint.validate\": [\"css\", \"less\", \"scss\", \"vue\"]\n}\n```\n\n## Npm Package\n\n- [@coder/prettier-config]()\n- [@coder/eslint-config]()\n- [@coder/stylelint-config]()\n\n### 使用方式\n\n下载依赖包：\n\n```shell\npnpm i @coder/prettier-config prettier -D\n```\n\n新建文件 `.prettierrc.js`\n\n```js\n// .prettierrc.js\nconst CoderPrettierConfig = require(\"@coder/prettier-config\");\n\nmodule.exports = {\n  ...CoderPrettierConfig,\n\n  // 自定义配置\n  // semi: true,\n};\n```\n"},{"metadata":{"title":"如何自动生成博客文章时间","tag":["blog"],"slug":"p2nd05nxpy","createdTime":"2024-08-30","modifiedTime":"2024-08-30 20:02:04"},"title":"如何自动生成博客文章时间","slug":"p2nd05nxpy","createdTime":"2024-08-30","modifiedTime":"2024-08-30 20:02:04","isPublish":true,"content":"\n当我们在自己的博客上新建一篇文章的时候，通常的做法是复制粘贴上一篇文章的结构。\n\n但是很多时间，会忘记修改文章的创建时间以及修改时间。\n\n这个时候，就需要一些自动化工具帮我们生成这些内容。\n\n## 实现思路\n\n1. 获取服务器的时间（存在部署后服务器与本地不一致的情况，所以不采用该方式）\n2. 在 `pre-commit` 的时候生成时间\n\n### pre-commit 生成时间\n\n直接上代码：\n\n```js\n// .husky/scripts/update-modified-time.js\n// ...\n\n// 获取在暂存盘中的文件\nconst getStagedFiles = (extension) => {\n  const stdout = execSync(\"git diff --cached --name-only\").toString();\n  return stdout.split(\"\\n\").filter((file) => path.extname(file).toLowerCase() === extension);\n};\n\nconst updateTimestamps = (filePath) => {\n  const fileContents = fs.readFileSync(filePath, \"utf8\");\n\n  const { data, content } = matter(fileContents);\n\n  const date = new Date();\n  const createdFormattedDate = formatDate(date, false); // Without time\n  const modifiedFormattedDate = formatDate(date, true); // With time\n\n  // 增加时间信息\n  const updatedData = {\n    ...data,\n    slug: data.slug || generateSlug(),\n    createdTime: data.createdTime || createdFormattedDate,\n    modifiedTime: modifiedFormattedDate,\n  };\n\n  // 创建新的 matter 和 content\n  const newFrontMatter = matter.stringify(content, updatedData).replace(/\"/g, \"\"\");\n  fs.writeFileSync(filePath, newFrontMatter, \"utf8\");\n\n  // 修改后再次 git add\n  execSync(`git add ${filePath}`);\n};\n\nconst main = () => {\n  // 获取暂存盘中 mdx 文件\n  const mdxFiles = getStagedFiles(\".mdx\");\n\n  mdxFiles.forEach((filePath) => {\n    // 读取文件并修改时间\n    if (fs.existsSync(filePath)) {\n      updateTimestamps(filePath);\n    }\n  });\n};\n\nmain();\n```\n\n这样，在每次 `commit` 的时候就会自动帮助我们生成新建时间以及修改时间。\n\n完整代码可参考：[blog](https://github.com/PengPeng-Qi/Blog/blob/main/.husky/scripts/update-modified-time.js)\n\n> 注意：该方式存在一个弊端，在开发的时候需要先进行 `commit` 才会生成时间字段。\n"},{"metadata":{"title":"How to create a npm package","slug":"oagypswm2v","tag":["npm"],"createdTime":"2024-07-18","modifiedTime":"2024-08-19 00:33:26"},"title":"How to create a npm package","slug":"oagypswm2v","createdTime":"2024-07-18","modifiedTime":"2024-08-19 00:33:26","isPublish":true,"content":"\n## 基本步骤\n\n### 1. 项目初始化\n\n```shell\nmkdir my-package && cd my-package && npm init\n\n# git init # 可选择不执行，添加后k可推送到远端方便远程管理\n# 创建 `.gitignore` 文件\n```\n\n### 2. 编写包\n\n#### 2.1 配置 package.json\n\n```json\n{\n  \"name\": \"my-package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple npm package example\",\n  \"main\": \"index.js\",\n  \"keywords\": [\"example\", \"npm\", \"package\"],\n  \"author\": \"Your Name\",\n  \"license\": \"MIT\",\n  \"files\": [\"index\"],\n  \"publishConfig\": {\n    \"registry\": \"http://xxx\"\n  }\n}\n```\n\n1. `files` 用于指定发布的文件，默认全部发布上去\n2. `publishConfig` 当我们需要将该包发布到私有服务器的时候，需要指定该值为私有服务器的地址，且下载的时候也需要指定下载\n   源。\n\n#### 2.2 下载相关依赖\n\n```shell\nnpm i package-name --save-peer # 将该包视为 peerDependencies\n```\n\n### 3. 发布包\n\n写好之后就可发布了\n\n```shell\nnpm login\nnpm publish\n```\n\n#### 3.1 更新并发布\n\n```shell\nnpm version patch # 1.0.0 --> 1.0.1 适用于向下兼容的错误修复\nnpm version minor # 1.0.0 --> 1.1.0 适用于向下兼容的新增功能\nnpm version major # 1.0.0 --> 2.0.0 使用于不向下兼容的更改\n\nnpm version 2.1.0 # 指定版本号\n```\n\n可以添加一个脚本来自动化版本号升级\n\n```json\n{\n  \"scripts\": {\n    \"release:patch\": \"npm version patch && npm publish\",\n    \"release:minor\": \"npm version minor && npm publish\",\n    \"release:major\": \"npm version major && npm publish\"\n  }\n}\n```\n"},{"metadata":{"title":"How to use mdx","slug":"265l4h81hn5","tag":["blog"],"createdTime":"2024-07-24","modifiedTime":"2024-08-19 00:33:26"},"title":"How to use mdx","slug":"265l4h81hn5","createdTime":"2024-07-24","modifiedTime":"2024-08-19 00:33:26","isPublish":true,"content":"\n## Gfm\n\n```mdx\n~~delete line~~\n```\n\n~~delete line~~\n\n```mdx\n- [x] Plan A\n- [x] Plan B\n\n- [ ] Plan C\n- [ ] Plan D\n```\n\n- [x] Plan A\n- [x] Plan B\n\n- [ ] Plan C\n- [ ] Plan D\n\n## Use Next Component\n\n<Image src={\"/logo.svg\"} alt=\"logo\" width=\"20\" height=\"20\" className=\"dark:invert\" />\n\n```tsx\n<Image src={\"/logo.svg\"} alt=\"logo\" width=\"20\" height=\"20\" className=\"dark:invert\" />\n```\n"},{"metadata":{"title":"How to use monorepo","tag":["engineering"],"slug":"7ay5s2k35x","createdTime":"2024-08-04","modifiedTime":"2024-08-19 00:33:26"},"title":"How to use monorepo","slug":"7ay5s2k35x","createdTime":"2024-08-04","modifiedTime":"2024-08-19 00:33:26","isPublish":true,"content":"\n## 初始化项目\n\n```shell\nmkdir my-monorepo\ncd my-monorepo\npnpm init\n```\n\n## 配置 pnpm-workspace.yaml\n\n```yaml\n# pnpm-workspace.yaml\npackages:\n  - \"packages/*\"\n```\n\n## 创建项目\n\n### Vue 项目\n\n```shell\nmkdir -p packages/vue-app # 创建文件夹 -p 表示没有 packages 文件夹也同步创建\ncd packages/vue-app\n\npnpm create vite@latest\n```\n\n### React 项目\n\n```shell\nmkdir -p packages/react-app # 创建文件夹 -p 表示没有 packages 文件夹也同步创建\ncd packages/react-app\n\npnpm create vite@latest\n```\n\n## 安装和链接依赖\n\n```shell\npnpm i\n```\n\n### 示例文件结构\n\n```shell\nmy-monorepo/\n├── apps/\n│ ├── react-app/\n│ │ ├── package.json\n│ │ ├── src/\n│ │ ├── public/\n│ │ └── vite.config.js\n│ └── vue-app/\n│   ├── package.json\n│   ├── src/\n│   ├── public/\n│   └── vite.config.js\n├── pnpm-workspace.yaml\n└── package.json\n```\n\n## git 管理\n\n```shell\ngit init\n```\n\n添加 `.gitignore` 文件\n\n```shell\n# Node modules\nnode_modules/\n**/node_modules/\n\n# Logs\nlogs/\n*.log\nnpm-debug.log*\npnpm-debug.log*\n\n# Build outputs\ndist/\n**/dist/\nbuild/\n**/build/\n\n# Vite cache\n.vite/\n**/.vite/\n\n# System files\n.DS_Store\nThumbs.db\n\n# IDE/editor specific files\n.vscode/\n.idea/\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n# Temporary files\ntmp/\ntemp/\n*.tmp\n*.temp\n\n# Generated files\n*.bak\n*.backup\n*.orig\n*.rej\n\n# Ignore packages in pnpm workspace\n# apps/react-app/node_modules\n# apps/vue-app/node_modules\n```\n\n## 启动项目\n\n```shell\npnpm --filter vue-app dev\npnpm --filter react-app dev\n```\n"}]